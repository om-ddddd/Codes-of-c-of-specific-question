#include <iostream>
#include <bits/stdc++.h>
using namespace std;
// int check_power(multimap<int,int> mapp,int l,int r){
//     int req_power=(r-l+2);
//     auto it= mapp.begin();
//     multiset<int> k;
//     while((it->first)<l){
//         k.insert(it->second);
//         it++;
//     }
//     auto its=k.begin();
//     int total_power=1;
//     int powerups=0;
//     while(its!=k.end()){
//         if(total_power < req_power){
//             total_power+=(*its);
//             powerups++;
//             its++;
//         }
//         else break;
//     }
//     k.clear();
//     if(total_power < req_power)
//     return -1;
//     else return powerups;
// } // dont think in one way
int check_power(multimap<int,int> &mapp,int l,int r,int total_power,int powerups){
    int req_power=(r-l+2);
    auto it= mapp.begin();
    multiset<int,greater<int>> k;
    while((it->first)<l){
        k.insert(it->second);
        it++;
    }
    auto its=k.begin();
    int powerups=0;
    while(its!=k.end()){
        if(total_power < req_power){
            total_power+=(*its);
            powerups++;
            its++;
        }
        else break;
    }
    k.clear();
    if(total_power < req_power)
    return -1;
    else return powerups;
} // dont think in one way
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int t;
    cin>>t;
    while(t--){
        int min_power=0;
        multimap<int,int> mapp; // to store powerups
        int n,m,l;
        cin>>n>>m>>l;
        vector<pair<int,int>> v; //to store l,r values;
        v.reserve(n);
        for(int i=0;i<n;i++){
            int a,b;
            cin>>a>>b;
            v.push_back({a,b});
        }
        for(int i=0;i<m;i++){
            int a,b;
            cin>>a>>b;
            mapp.insert({a,b});
        }
       
        int returned_value;
        for(int i=0;i<1;i++){
          returned_value=check_power(mapp,v[1].first,v[1].second);
          if(returned_value==-1){
          cout<<-1<<"\n";
          break;
          }
          else if(returned_value > min_power){
            min_power=returned_value;
          }
          else continue;
        }
        if(returned_value!=-1){
            cout<<min_power<<"\n";
        }
    }
    return 0;
}
